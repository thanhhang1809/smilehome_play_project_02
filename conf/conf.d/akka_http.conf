## Akka HTTP server
# https://playframework.com/documentation/2.6.x/SettingsAkkaHttp
play.server.akka.http2 {
    enabled = true
    enabled = ${?http2.enabled}
}
play {
    server {
        provider = "play.core.server.AkkaHttpServerProvider"

        http {
            # Set to "disabled" to disable HTTP
            port = 9000
            port = ${?http.port}

            address = "0.0.0.0"
            address = ${?http.address}

            # The idle timeout for an open connection after which it will be closed
            # Set to null to disable the timeout
            idleTimeout = 75 seconds
        }

        https {
            #port = 9022
            #port = ${?https.port}

            #address = "0.0.0.0"
            #address = ${?https.address}

            # The idle timeout for an open connection after which it will be closed
            # Set to null to disable the timeout
            idleTimeout = ${play.server.http.idleTimeout}

            # The SSL engine provider
            engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
            engineProvider = ${?play.http.sslengineprovider}

            # HTTPS keystore configuration, used by the default SSL engine provider
            keyStore {
                # The path to the keystore
                path = "conf/keys/server.keystore"
                path = ${?https.keyStore}

                # The type of the keystore
                type = "JKS"
                type = ${?https.keyStoreType}

                # The password for the keystore
                password = ""
                password = ${?https.keyStorePassword}

                # The algorithm to use. If not set, uses the platform default algorithm.
                algorithm = ${?https.keyStoreAlgorithm}
            }

            # HTTPS truststore configuration
            trustStore {
                # If true, does not do CA verification on client side certificates
                noCaVerification = true
             }

            # Whether JSSE want client auth mode should be used. This means, the server
            # will request a client certificate, but won't fail if one isn't provided.
            wantClientAuth = false

            # Whether JSSE need client auth mode should be used. This means, the server
            # will request a client certificate, and will fail and terminate the session
            # if one isn't provided.
            needClientAuth = false
        }

        # The path to the process id file created by the server when it runs.
        pidfile.path = RUNNING_PID
        pidfile.path = ${?pidfile.path}

        websocket {
            # Maximum allowable frame payload length. Setting this value to your application's
            # requirement may reduce denial of service attacks using long data frames.
            frame.maxLength = 64k
            frame.maxLength = ${?websocket.frame.maxLength}
        }

        akka {
            # How long to wait when binding to the listening socket
            bindTimeout = 2 seconds

            # How long a request takes until it times out
            requestTimeout = null

            # Enables/disables automatic handling of HEAD requests.
            # If this setting is enabled the server dispatches HEAD requests as GET
            # requests to the application and automatically strips off all message
            # bodies from outgoing responses.
            # Note that, even when this setting is off the server will never send
            # out message bodies on responses to HEAD requests.
            transparent-head-requests = off

            # If this setting is empty the server only accepts requests that carry a
            # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
            # Set to a non-empty value to be used in lieu of a missing or empty `Host`
            # header to make the server accept such requests.
            # Note that the server will never accept HTTP/1.1 request without a `Host`
            # header, i.e. this setting only affects HTTP/1.1 requests with an empty
            # `Host` header as well as HTTP/1.0 requests.
            # Examples: `www.spray.io` or `example.com:8080`
            default-host-header = ""

            # The default value of the `Server` header to produce if no
            # explicit `Server`-header was included in a response.
            # If this value is the empty string and no header was included in
            # the request, no `Server` header will be rendered at all.
            server-header = ""

            # Configures the processing mode when encountering illegal characters in
            # header value of response.
            #
            # Supported mode:
            # `error`  : default mode, throw an ParsingException and terminate the processing
            # `warn`   : ignore the illegal characters in response header value and log a warning message
            # `ignore` : just ignore the illegal characters in response header value
            illegal-response-header-value-processing-mode = warn

            # This setting is set in `akka.http.server.parsing.max-content-length`
            # Play uses the concept of a `BodyParser` to enforce this limit, so we override it to infinite.
            max-content-length = infinite
        }
    }
}
